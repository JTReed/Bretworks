Page Load Times Data
--------------------
1. API Response Time (to when the callback funtion is invoked):
	Telize Geolocation API:
		1. On Campus: 727 ms
		2. Off Campus: 353 ms
		3. Mobile (T-Mobile): 632 ms
		4. Outside of Madison (Corvallis, OR): 460 ms
	WC3 Geolocation API:
		1. On Campus: 787 ms
		2. Off Campus: 590 ms
		3. Mobile (T-Mobile): 1414 ms
		4. Outside of Madison (Corvallis, OR): 106504(outlier) ms
	OpenWeatherMap API: 	
		1. On Campus: 135, 357 ms
		2. Off Campus: 489, 1539 ms
		3. Mobile (T-Mobile): 307, 353 ms
		4. Outside of Madison (Corvallis, OR): 546, 742 ms
	Google Places Map API, get nearest locations: 	
		1. On Campus: 993, 1010 ms
		2. Off Campus: 947, 951 ms
		3. Mobile (T-Mobile): 868, 872 ms
		4. Outside of Madison (Corvallis, OR): 215, 317 ms
	Google Places API, Geolocator:	
		1. On Campus: 43, 46, 55, 62 ms
		2. Off Campus: 93, 97 ms
		3. Mobile (T-Mobile): 130, 134 ms
		4. Outside of Madison (Corvallis, OR): 335 ms
2. Page Fetch Time (fetchStart to ResponseEnd): 
	a. On Campus: 173 ms
	b. Off Campus: 484 ms
	c. Mobile, T-Mobile: 9 ms
	d. Outside of Madison (Corvallis, OR): 149 ms
3. Page Render Time (domLoading to domComplete): 
	a. On Campus: 1098 ms
	b. Off Campus: 789 ms
	c. Mobile, T-Mobile: 689 ms
	d. Outside of Madison (Corvallis, OR): 562 ms
4. Fetch & Render Page (fetchStart to domComplete): 
	a. On Campus: 1296 ms
	b. Off Campus: 1273 ms
	c. Mobile, T-Mobile: 705 ms
	d. Outside of Madison (Corvallis, OR): 662 ms

Questions
---------
1. For each location/connectivity combination, which REST API call takes the longest complete? Is the answer the same for all location/connectivity combinations? Does this mean the delay for this REST API call is primarily determined by the browser, the last-mile connection, or the remote service?
---
- Campus
  - Google Places API, get nearby places (2 places): 1010 ms
- Off Campus
  - OpenWeatherMap: 1539 ms
- Mobile
  - WC3: 1414 ms
- Out-of-State
  - OpenWeatherMap: 742 ms
The slowest API call varies by location/connectivity combination, but, for two of the four combinations, the call to OpenWeatherMap was the slowest. OpenWeatherMap was not consistently the slowest API call across all locations, and since all these tests were done in Google Chrome, the browser should not be to blame for the delay. The remote service is also consistent between each call, so the last-mile for these locations must be what is to blame.

2. For one of the REST API calls (e.g., IP-based geolocation), how long does it take for each location/connectivity combination? Over which network (i.e. last-mile connection) does the call complete the fastest? The slowest? What is one possible networking explanation for these results?
---
 Google Maps API, Get nearest locations
  - Campus (2 places): 993 ms 
  - Off Campus (2 places): 947 ms 
  - Mobile (2 places): 868 ms 
  - Out-Of-State(1 place): 335 ms 
 The call completes the fastest on the Out-of-State Comcast network and the slowest on campus. For one, the request out-of-state only returned one place while all the others returned two places - it’s assumed that since less data needed to be processed and sent, the request took much less time. The last-mile connection (the travel from the browser to the ISP) varies greatly between ISPs, so the UW network’s last-mile seems to be much longer than Corvallis’ Comcast last-mile. Every API request save for the Google Places Geolocator also takes much longer on the UW Campus than in Corvallis, supporting this claim.

3. If you add the time taken to fetch the page (metric #2) to the time taken to render the page (metric #3) does it equal the time reported for metric #4? Why or why not?
---
In most cases, the sum of the fetch and render times (#2 + #3) is a little bit lower than the fetch & render time (#4). When testing, we noticed a small (e.g. 24ms) delay between responseEnd and domLoading - there is a tiny difference between the time fetching the page ends and the time it takes to render the page begins. The page does not begin to render until all the files have been parsed, so it is presumed that this time is used to finish parsing the HTML and JavaScript. 
